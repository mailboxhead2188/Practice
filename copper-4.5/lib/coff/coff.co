
// Machine Types
const IMAGE_FILE_MACHINE_UNKNOWN	= USHORT : 0
const IMAGE_FILE_MACHINE_ALPHA	= USHORT : 0x184
const IMAGE_FILE_MACHINE_ARM	= USHORT : 0x1c0
const IMAGE_FILE_MACHINE_ALPHA64	= USHORT : 0x284
const IMAGE_FILE_MACHINE_I386	= USHORT : 0x14c
const IMAGE_FILE_MACHINE_IA64	= USHORT : 0x200
const IMAGE_FILE_MACHINE_M68K	= USHORT : 0x268
const IMAGE_FILE_MACHINE_MIPS16	= USHORT : 0x266
const IMAGE_FILE_MACHINE_MIPSFPU	= USHORT : 0x366
const IMAGE_FILE_MACHINE_MIPSFPU16	= USHORT : 0x466
const IMAGE_FILE_MACHINE_POWERPC	= USHORT : 0x1f0
const IMAGE_FILE_MACHINE_R3000	= USHORT : 0x162
const IMAGE_FILE_MACHINE_R4000	= USHORT : 0x166
const IMAGE_FILE_MACHINE_R10000	= USHORT : 0x168
const IMAGE_FILE_MACHINE_SH3	= USHORT : 0x1a2
const IMAGE_FILE_MACHINE_SH4	= USHORT : 0x1a6
const IMAGE_FILE_MACHINE_THUMB	= USHORT : 0x1c2

// File Characteristics
const IMAGE_FILE_RELOCS_STRIPPED	= USHORT : 0x0001
const IMAGE_FILE_EXECUTABLE_IMAGE	= USHORT : 0x0002
const IMAGE_FILE_LINE_NUMS_STRIPPED	= USHORT : 0x0004
const IMAGE_FILE_LOCAL_SYMS_STRIPPED	= USHORT : 0x0008
const IMAGE_FILE_AGGRESIVE_WS_TRIM	= USHORT : 0x0010
const IMAGE_FILE_LARGE_ADDRESS_AWARE	= USHORT : 0x0020
const IMAGE_FILE_BYTES_REVERSED_LO	= USHORT : 0x0080
const IMAGE_FILE_32BIT_MACHINE	= USHORT : 0x0100
const IMAGE_FILE_DEBUG_STRIPPED	= USHORT : 0x0200
const IMAGE_FILE_REMOVABLE_RUN_FROM_SWAP	= USHORT : 0x0400
const IMAGE_FILE_NET_RUN_FROM_SWAP	= USHORT : 0x0800
const IMAGE_FILE_SYSTEM	= USHORT : 0x1000
const IMAGE_FILE_DLL	= USHORT : 0x2000
const IMAGE_FILE_UP_SYSTEM_ONLY	= USHORT : 0x4000
const IMAGE_FILE_BYTES_REVERSED_HI	= USHORT : 0x8000

// Section Flags
const IMAGE_SCN_TYPE_REG	= DWORD : 0x00000000
const IMAGE_SCN_TYPE_DSECT	= DWORD : 0x00000001
const IMAGE_SCN_TYPE_NOLOAD	= DWORD : 0x00000002
const IMAGE_SCN_TYPE_GROUP	= DWORD : 0x00000004
const IMAGE_SCN_TYPE_NO_PAD	= DWORD : 0x00000008
const IMAGE_SCN_TYPE_COPY	= DWORD : 0x00000010
const IMAGE_SCN_CNT_CODE	= DWORD : 0x00000020
const IMAGE_SCN_CNT_INITIALIZED_DATA	= DWORD : 0x00000040
const IMAGE_SCN_CNT_UNINITIALIZED_DATA	= DWORD : 0x00000080
const IMAGE_SCN_LNK_OTHER	= DWORD : 0x00000100
const IMAGE_SCN_LNK_INFO	= DWORD : 0x00000200
const IMAGE_SCN_TYPE_OVER	= DWORD : 0x00000400
const IMAGE_SCN_LNK_REMOVE	= DWORD : 0x00000800
const IMAGE_SCN_LNK_COMDAT	= DWORD : 0x00001000
const IMAGE_SCN_MEM_FARDATA	= DWORD : 0x00008000
const IMAGE_SCN_MEM_PURGEABLE	= DWORD : 0x00020000
const IMAGE_SCN_MEM_16BIT	= DWORD : 0x00020000
const IMAGE_SCN_MEM_LOCKED	= DWORD : 0x00040000
const IMAGE_SCN_MEM_PRELOAD	= DWORD : 0x00080000
const IMAGE_SCN_ALIGN_1BYTES	= DWORD : 0x00100000
const IMAGE_SCN_ALIGN_2BYTES	= DWORD : 0x00200000
const IMAGE_SCN_ALIGN_4BYTES	= DWORD : 0x00300000
const IMAGE_SCN_ALIGN_8BYTES	= DWORD : 0x00400000
const IMAGE_SCN_ALIGN_16BYTES	= DWORD : 0x00500000
const IMAGE_SCN_ALIGN_32BYTES	= DWORD : 0x00600000
const IMAGE_SCN_ALIGN_64BYTES	= DWORD : 0x00700000
const IMAGE_SCN_ALIGN_128BYTES	= DWORD : 0x00800000
const IMAGE_SCN_ALIGN_256BYTES	= DWORD : 0x00900000
const IMAGE_SCN_ALIGN_512BYTES	= DWORD : 0x00A00000
const IMAGE_SCN_ALIGN_1024BYTES	= DWORD : 0x00B00000
const IMAGE_SCN_ALIGN_2048BYTES	= DWORD : 0x00C00000
const IMAGE_SCN_ALIGN_4096BYTES	= DWORD : 0x00D00000
const IMAGE_SCN_ALIGN_8192BYTES	= DWORD : 0x00E00000 
const IMAGE_SCN_LNK_NRELOC_OVFL	= DWORD : 0x01000000
const IMAGE_SCN_MEM_DISCARDABLE	= DWORD : 0x02000000
const IMAGE_SCN_MEM_NOT_CACHED	= DWORD : 0x04000000
const IMAGE_SCN_MEM_NOT_PAGED	= DWORD : 0x08000000
const IMAGE_SCN_MEM_SHARED	= DWORD : 0x10000000
const IMAGE_SCN_MEM_EXECUTE	= DWORD : 0x20000000
const IMAGE_SCN_MEM_READ	= DWORD : 0x40000000
const IMAGE_SCN_MEM_WRITE	= DWORD : 0x80000000

// Symbol
const IMAGE_SYM_DEBUG	= SHORT : -2
const IMAGE_SYM_TYPE_NULL	= SHORT : 0
const IMAGE_SYM_DTYPE_NULL	= SHORT : 0
	
const IMAGE_SYM_CLASS_END_OF_FUNCTION	= BYTE : 0-1
const IMAGE_SYM_CLASS_NULL	= BYTE : 0
const IMAGE_SYM_CLASS_AUTOMATIC	= BYTE : 1
const IMAGE_SYM_CLASS_EXTERNAL	= BYTE : 2
const IMAGE_SYM_CLASS_STATIC	= BYTE : 3
const IMAGE_SYM_CLASS_REGISTER	= BYTE : 4
const IMAGE_SYM_CLASS_EXTERNAL_DEF	= BYTE : 5
const IMAGE_SYM_CLASS_LABEL	= BYTE : 6
const IMAGE_SYM_CLASS_UNDEFINED_LABEL	= BYTE : 7
const IMAGE_SYM_CLASS_MEMBER_OF_STRUCT	= BYTE : 8
const IMAGE_SYM_CLASS_ARGUMENT	= BYTE : 9
const IMAGE_SYM_CLASS_STRUCT_TAG	= BYTE : 10
const IMAGE_SYM_CLASS_MEMBER_OF_UNION	= BYTE : 11
const IMAGE_SYM_CLASS_UNION_TAG	= BYTE : 12
const IMAGE_SYM_CLASS_TYPE_DEFINITION	= BYTE : 13
const IMAGE_SYM_CLASS_UNDEFINED_STATIC	= BYTE : 14
const IMAGE_SYM_CLASS_ENUM_TAG	= BYTE : 15
const IMAGE_SYM_CLASS_MEMBER_OF_ENUM	= BYTE : 16
const IMAGE_SYM_CLASS_REGISTER_PARAM	= BYTE : 17
const IMAGE_SYM_CLASS_BIT_FIELD	= BYTE : 18
const IMAGE_SYM_CLASS_BLOCK	= BYTE : 100
const IMAGE_SYM_CLASS_FUNCTION	= BYTE : 101
const IMAGE_SYM_CLASS_END_OF_STRUCT	= BYTE : 102
const IMAGE_SYM_CLASS_FILE	= BYTE : 103
const IMAGE_SYM_CLASS_SECTION	= BYTE : 104
const IMAGE_SYM_CLASS_WEAK_EXTERNAL	= BYTE : 105

const IMAGE_REL_I386_ABSOLUTE	= Uint16 : 0x0000
const IMAGE_REL_I386_DIR16	= Uint16 : 0x0001
const IMAGE_REL_I386_REL16	= Uint16 : 0x0002
const IMAGE_REL_I386_DIR32	= Uint16 : 0x0006
const IMAGE_REL_I386_DIR32NB	= Uint16 : 0x0007
const IMAGE_REL_I386_SEG12	= Uint16 : 0x0009
const IMAGE_REL_I386_SECTION	= Uint16 : 0x000A
const IMAGE_REL_I386_SECREL	= Uint16 : 0x000B
const IMAGE_REL_I386_REL32	= Uint16 : 0x0014

const IMAGE_SIZEOF_SHORT_NAME	= Size : 8
const IMAGE_SIZEOF_SECTION_HEADER	= Size : 40

struct IMAGE_FILE_HEADER
	var Machine	: USHORT
	var NumberOfSections	: USHORT
	var TimeDateStamp	: ULONG
	var PointerToSymbolTable	: ULONG
	var NumberOfSymbols	: ULONG
	var SizeOfOptionalHeader	: USHORT
	var Characteristics	: USHORT
end

// Section Header Format

struct IMAGE_SECTION_HEADER
	var Name	: [IMAGE_SIZEOF_SHORT_NAME] UCHAR
	var VirtualSize	: ULONG
	var VirtualAddress	: ULONG
	var SizeOfRawData	: ULONG
	var PointerToRawData	: ULONG
	var PointerToRelocations	: ULONG
	var PointerToLineNumbers	: ULONG
	var NumberOfRelocations	: USHORT
	var NumberOfLineNumbers	: USHORT
	var Characteristics	: ULONG
end

struct IMAGE_SYMBOL
	var Name	: [IMAGE_SIZEOF_SHORT_NAME] UCHAR
	var Value	: DWORD
	var SectionNumber	: SHORT
	var Type	: WORD
	var StorageClass	: BYTE
	var NumberOfAuxSymbols	: BYTE

	// Return self as an IMAGE_SYMBOL_LONG
	function long
		return self cast (*IMAGE_SYMBOL_LONG)
	end

end

struct IMAGE_SYMBOL_LONG
	var Zeroes	: DWORD
	var Offset	: DWORD
	var Value	: DWORD
	var SectionNumber	: SHORT
	var Type	: WORD
	var StorageClass	: BYTE
	var NumberOfAuxSymbols	: BYTE
end

// Do not use the size of structure because it is aligned to a multiple of 4 bytes
const IMAGE_SYMBOL_size	= Uint32 : 18

struct IMAGE_AUX_SYMBOL_FUNCTION
	var TagIndex	: DWORD
	var TotalSize	: DWORD
	var PointerToLinenumber	: DWORD
	var PointerToNextFunction	: DWORD
	var unused	: WORD
end

struct IMAGE_AUX_SYMBOL_BF_EF
	var unused1	: DWORD
	var Linenumber	: WORD
	var unused2	: WORD
	var unused3	: DWORD
	var PointerToNextFunction	: DWORD
	var unused4	: WORD
end

struct IMAGE_LINENUMBER
	var VirtualAddress	: DWORD
	var Linenumber	: WORD
end

// Do not use the size of the structure because it is aligned to a multiple of 4 bytes
const IMAGE_LINENUMBER_size = Uint32 : 6

struct IMAGE_RELOCATION
	var VirtualAddress	: DWORD
	var SymbolTableIndex	: DWORD
	var Type	: WORD
end

// Do not use the size of the structure because it is aligned to a multiple of 4 bytes
const IMAGE_RELOCATION_size = Uint32 : 10

const DT_FUNCTION	= Uint16 : 0x20
        
.private
const BYTE	= Uint8
const WORD	= Uint16
const DWORD	= Uint32
const UCHAR	= Uint8
const USHORT	= Uint16
const ULONG	= Uint32
const SHORT	= Int16

import "std"
